name: PR tests

on:
  push:
    branches:
      - ci-refactor
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_DEFAULT_TOOLCHAIN: "1.72-x86_64-unknown-linux-gnu"
  RUST_NIGHTLY_TOOLCHAIN: "nightly-2023-01-03-x86_64-unknown-linux-gnu"

jobs:
  setup-rust:
    runs-on: ubuntu-latest
    outputs:
      cache-shared-key: ${{ steps.rustc-version.outputs.cachekey }}
    steps:
      - name: Install Rust toolchain ${{ env.RUST_DEFAULT_TOOLCHAIN }}
        run: rustup toolchain install $RUST_DEFAULT_TOOLCHAIN
      - name: Install nightly
        run: rustup toolchain install $RUST_NIGHTLY_TOOLCHAIN
      - name: Install riscv target
        run: rustup target add riscv32imac-unknown-none-elf --toolchain $RUST_NIGHTLY_TOOLCHAIN
      - name: Install stdlib
        run: rustup component add rust-src --toolchain $RUST_NIGHTLY_TOOLCHAIN
      - name: Create cache key
        id: rustc-version
        run: |
          DATE=$(rustc $RUSTC_DEFAULT_TOOLCHAIN --version --verbose | sed -ne 's/^commit-date: \(20[0-9][0-9]\)-\([01][0-9]\)-\([0-3][0-9]\)$/\1\2\3/p')
          HASH=$(rustc $RUSTC_DEFAULT_TOOLCHAIN --version --verbose | sed -ne 's/^commit-hash: //p')
          echo "cachekey=$(echo $DATE$HASH | head -c12)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ steps.rustc-version.outputs.cachekey }}"
          cache-on-failure: true

  pilcom:
    runs-on: ubuntu-latest
    steps:
      - name: âš¡ Cache Pilcom
        id: cache-pilcom
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/pilcom/node_modules
          key: ${{ runner.os }}-pilcom-node-modules
      - name: Install pilcom
        if: steps.cache-pilcom.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/0xPolygonHermez/pilcom.git
          cd pilcom
          npm install

  build:
    runs-on: ubuntu-latest
    needs:
      - setup-rust
      - pilcom
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ needs.setup-rust.outputs.cache-shared-key }}"
          cache-on-failure: true
      - name: Build
        run: cargo build --bins --tests --benches --all --all-features --profile pr-tests

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
      - name: Restore pilcom cache
        uses: actions/cache/restore@v3
        with:
          path: |
            $GITHUB_WORKSPACE/pilcom/node_modules
          key: ${{ runner.os }}-pilcom-node-modules
      - name: Run default tests
        run: cargo test --all --all-features --profile pr-tests --verbose
        env:
          PILCOM: ${{ github.workspace }}/pilcom/

  slow-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: false
      - name: Restore pilcom cache
        uses: actions/cache/restore@v3
        with:
          path: |
            $GITHUB_WORKSPACE/pilcom/node_modules
          key: ${{ runner.os }}-pilcom-node-modules
      - name: Run slow tests
        # Number threads is set to 1 because the runner does not have enough memory for more.
        run: cargo test --all --all-features --profile pr-tests --verbose -- --ignored --nocapture --test-threads=1 --exact test_keccak test_vec_median instruction_tests::addi test_many_chunks
        env:
          PILCOM: ${{ github.workspace }}/pilcom/

  bench-check:
    runs-on: ubuntu-latest
    needs: setup-rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
      - name: Check benches compile without running them
        run: cargo bench --all --all-features --profile pr-tests --no-run
      - name: Check without Halo2
        run: cargo check --all --no-default-features --profile pr-tests


  clippy:
    runs-on: ubuntu-latest
    needs: setup-rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
      - name: Install Clippy
        run: rustup component add clippy --toolchain $RUST_DEFAULT_TOOLCHAIN
      - name: Lint
        run: cargo clippy --all --all-targets --all-features
        #env:
        #  RUSTFLAGS: -Dwarnings

  fmt:
    runs-on: ubuntu-latest
    needs: setup-rust
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
      - name: Install rustfmt
        run: rustup component add rustfmt --toolchain $RUST_DEFAULT_TOOLCHAIN
      - name: Format
        run: cargo fmt --all --check --verbose
